lines(f1[i,])
lines(f2[i,],col="red")
}
x = seq(0,5,0.01)
f1 = c()
f2 = c()
for (i in 1:30) {
f1 = c(f1,sin(x+i/1000)+runif(length(x),0,0.5))
f2 = c(f2,cos(x+i/1000)+runif(length(x),0,0.5))
}
x = c(f1,f2)
lenght-x
lenght(x)
length(x)
length(seq(0,5,0.01))
N = 501
P = 30
gaittime = (1:N)/(N+1)
gaitrange = c(0,1)
gaitbasis <- create.fourier.basis(gaitrange,N+1)
lambda    <- 10^(-11.5)
harmaccelLfd <- vec2Lfd(c(0, 0, (2*pi)^2, 0))
gaitfdPar <- fdPar(gaitbasis, harmaccelLfd, lambda)
y=structure(x,dim=c(N,P,2))
gaitfd <- smooth.basis(gaittime, y, gaitfdPar)$fd
ccafdPar <- fdPar(gaitfd, harmaccelLfd, 1e-8)
ccafd0    <- cca.fd(gaitfd[,1], gaitfd[,2], ncan=3, ccafdPar, ccafdPar)
round(ccafd0$ccacorr[1:6],3)
plot.cca.fd(ccafd0)
plot.cca.fd(ccafd)
x = c(Power,Eff)
N = length(Puissance[1,])
P = length(Puissance[,1])
gaittime = (1:N)/(N+1)
gaitrange = c(0,1)
gaitbasis <- create.fourier.basis(gaitrange,N+1)
lambda    <- 10^(-11.5)
harmaccelLfd <- vec2Lfd(c(0, 0, (2*pi)^2, 0))
gaitfdPar <- fdPar(gaitbasis, harmaccelLfd, lambda)
y=structure(x,dim=c(N,P,2))
gaitfd <- smooth.basis(gaittime, y, gaitfdPar)$fd
ccafdPar <- fdPar(gaitfd, harmaccelLfd, 1e-8)
ccafd0    <- cca.fd(gaitfd[,1], gaitfd[,2], ncan=3, ccafdPar, ccafdPar)
#  display the canonical correlations
round(ccafd0$ccacorr[1:6],3)
#  compute a VARIMAX rotation of the canonical variables
ccafd <- varmx.cca.fd(ccafd0)
plot.cca.fd(ccafd)
#  display the canonical correlations
round(ccafd0$ccacorr[1:6],3)
plot(ccafd0$ccavar1[,1],ccafd0$ccavar2[,1])
ccafd0$ccacorr
ccafd0$ccavar1
ccafd0$ccawtfd1
plot(ccafd0$ccawtfd1$coefs[,1])
plot(ccafd0$ccawtfd1$coefs[,1],ccafd0$ccawtfd1$coefs[,2])
plot(ccafd0$ccawtfd1$coefs[,1],ccafd0$ccawtfd2$coefs[,1])
plot(Puissance[1,],ylim=c(-500,3500))
for (i in 1:55){
lines(Puissance[i,])
lines(1000*Efficacite2[i,],col="red")
}
#  plot the canonical weight functions
plot.cca.fd(ccafd0)
#  plot the canonical weight functions
plot.cca.fd(ccafd0)
#  plot the canonical weight functions
plot.cca.fd(ccafd0)
#  plot the canonical weight functions
plot.cca.fd(ccafd0)
x = seq(0,5,0.01)
f1 = c()
f2 = c()
for (i in 1:30) {
f1 = c(f1,(x+runif(length(x),0,0.5))**2)
f2 = c(f2,cos(x+i/1000)+runif(length(x),0,0.5))
}
plot(f1[1,])
x = seq(0,5,0.01)
f1 = c()
for (i in 1:30) {
f1 = rbind(f1,(x+runif(length(x),0,0.5))**2)
f2 = rbind(f2,cos(x+i/1000)+runif(length(x),0,0.5))
}
f2 = c()
plot(f1[1,])
for (i in 2:30) {
lines(f1[i,])
lines(f2[i,],col="red")
}
x = seq(0,5,0.01)
f1 = c()
f2 = c()
for (i in 1:30) {
f2 = rbind(f2,(x-runif(length(x),0,0.5))**2)
x = seq(0,5,0.01)
f1 = c()
f2 = c()
for (i in 1:30) {
f1 = rbind(f1,(x+runif(length(x),0,0.5))**2)
f2 = rbind(f2,(x-runif(length(x),0,0.5))**2)
}
plot(f1[1,])
for (i in 2:30) {
lines(f1[i,])
lines(f2[i,],col="red")
}
x = seq(0,5,0.01)
f1 = c()
f2 = c()
for (i in 1:30) {
f1 = rbind(f1,(x+runif(length(x),0,0.5))**2)
f2 = rbind(f2,(x-runif(length(x),0,0.5))**2)
}
plot(f1[1,])
5+5
ngfngfdn
Z = read.csv('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/Efficacite3d_Tronquee.csv',sep=";",header=TRUE)
dim(Z)
Z
Z[1:5,1:5]
Z = read.csv('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/Efficacite3d_Tronquee.csv',sep=";",header=TRUE,row.names = TRUE)
Z[1:5,1:5]
Z = read.csv('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/Efficacite3d_Tronquee.csv',sep=";",header=TRUE,row.names = 1)
Z[1:5,1:5]
Z = read.csv('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/Efficacite3d_Tronquee.csv',sep=";",header=TRUE,row.names = TRUE)
Z[1:5,1:5]
Z = read.csv('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/Efficacite3d_Tronquee.csv',sep=";",header=TRUE,row.names = 1)
Z = read.csv('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/Efficacite3d_Tronquee.csv',sep=";",header=TRUE)
Z = Z[,-1]
dim(Z)
Clustering(Z,4)
library(funHDDC)
library(funData)
library(fda)
library(fda.usc)
library(stringr)
library(Rcmdr)
Clustering = function(X,k) {
#Univariate clustering with functional data, find all the modeles as possible
#param X : dataset J*Q where Q is the number of curve and J the length
#param k : the number of clusters
N=length(X[,1])
P=length(X[1,])
basis<- create.bspline.basis(c(0,1), nbasis=25)
var1<-smooth.basis(argvals=seq(0,1,length.out = P),y=t(X),fdParobj=basis)$fd
res.uni<-funHDDC(var1,K=1:k,model=c('AkBkQkDk','ABkQkDk', 'AkBQkDk', 'ABQkDk'),init="kmeans",threshold=0.2)
#print(res.uni)
}
Clustering_Best = function(X,model,k) {
#Make a model with the best parameters found previously
#param X     : dataset J*Q where Q is the number of curve and J the length
#param k     : the number of clusters
#param model : string with the name of the model
N=length(X[,1])
P=length(X[1,])
basis<- create.bspline.basis(c(0,1), nbasis=25)
var1<-smooth.basis(argvals=seq(0,1,length.out = P),y=t(X),fdParobj=basis)$fd
res.uni<-funHDDC(var1,K=k,model=model,init="kmeans",threshold=0.2)
return(list(mod=res.uni,class=res.uni$class))
}
Clustering(Z,4)
clf = Clustering_Best(Z,"ABQKDK",4)
seq(0,57,1)
Exportation(seq(0,56,1),clf$class,"Clustering_Efficacite3D")
getwd()
Z = read.csv('C:\\Users\\1mduquesnoy\\Desktop\\Stage\\Python\\gdeg.csv',sep=";")
z
Z
mod = aov(P ~ Y, Z)
summary(mod)
plot(model)
plot(mod)
plot(mod)
ID_Reading = function(Nouveaute) {
# Make an output by creating a list of individuals in the folder for every new trial
#param Nouveaute   : the name (as a string) of the folder containing all the new trials
ldf_1 = list.files(path=Nouveaute,pattern="csv")
ID = c()
for (i in 1:length(ldf_1)) {
l = unlist(str_split(ldf_1[i], "_"))
ID = c(ID,unlist(str_c(l[2],str_sub(l[3], 1, 10),sep="_")))
}
return("ID"=ID)
}
View(Clustering)
library(funHDDC)
library(funData)
library(fda)
library(fda.usc)
library(stringr)
library(Rcmdr)
##
ldf_1 = list.files(path="C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/",pattern="csv")
ldf_1
ldf_2 = list.files(path="C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/indiceEfficacite/",pattern="csv")
ldf_2
dim(Efficacite)
dim(Puissance)
dim(Efficacite2)
gait
dim(gait)
y
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=";")
}
ldf_2
for (i in 1:length(ldf_2)) {
if (str_detect(ldf_2[i],"3D") == TRUE) {
}
#X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=";")
#L1 = c(L1,length(X$Puissance))
}
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=";")
L1 = c(L1,length(X$Puissance))
}
Puissance = c()
Efficacite = c()
L1 = c()
L2 = c()
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=";")
L1 = c(L1,length(X$Puissance))
}
for (i in 1:length(ldf_2)) {
if (str_detect(ldf_2[i],"3D") == TRUE) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/indiceEfficacite/',ldf_2[i],sep=""),sep=";")
L2 = c(L2,length(X[1,]))
}
}
L2
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=";")
Puissance = c(Puissance,X$Puissance[1:min(min(L1),min(L2))])
}
length(Puissance)
min(min(L1),min(L2))
min(L1)
L1
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=";")
print(X)
L1 = c(L1,length(X$Puissance))
}
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=",")
L1 = c(L1,length(X$Puissance))
}
L1
L1 = c()
L2 = c()
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=",")
L1 = c(L1,length(X$Puissance))
}
L1
Puissance = c()
Efficacite = c()
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=";")
Puissance = c(Puissance,X$Puissance[1:min(min(L1),min(L2))])
}
length(Puissance)
min(min(L1),min(L2))
m = min(min(L1),min(L2))
Puissance = c()
m = min(min(L1),min(L2))
m
typeof(m)
L2
for (i in 1:length(ldf_2)) {
if (str_detect(ldf_2[i],"3D") == TRUE) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/indiceEfficacite/',ldf_2[i],sep=""),sep=";")
L2 = c(L2,length(X[1,]))
}
}
L2
m = min(min(L1),min(L2))
m
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=";")
Puissance = c(Puissance,X$Puissance[1:m])
}
length(Puissance)
m
print(X$Puissance[1:m])
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=";")
print(X$Puissance[1:m])
Puissance = c(Puissance,X$Puissance[1:m])
}
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=",")
print(X$Puissance[1:m])
Puissance = c(Puissance,X$Puissance[1:m])
}
Puissance = c()
Efficacite = c()
L1 = c()
L2 = c()
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=",")
L1 = c(L1,length(X$Puissance))
}
for (i in 1:length(ldf_2)) {
if (str_detect(ldf_2[i],"3D") == TRUE) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/indiceEfficacite/',ldf_2[i],sep=""),sep=";")
L2 = c(L2,length(X[1,]))
}
}
m = min(min(L1),min(L2))
for (i in 1:length(ldf_1)) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Matlab/Fichier Essais/',ldf_1[i],sep=""),sep=",")
Puissance = c(Puissance,X$Puissance[1:m])
}
length(Puissance)
for (i in 1:length(ldf_2)) {
if (str_detect(ldf_2[i],"3D") == TRUE) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/indiceEfficacite/',ldf_2[i],sep=""),sep=";")
for (i in 1:length(X[,1])) {
Efficacite = c(Efficacite,X[i,1:m])
}
}
}
length(Efficacite)
length(Puissance)
2*N*P
N*P
m*P
N
m
479*60
P
##
P = 60
N = m
P*N
gaittime  <- (1:N)/(N+1)
gaitrange <- c(0,1)
gaitbasis <- create.fourier.basis(gaitrange,N+1)
lambda    <- 10^(-11.5)
harmaccelLfd <- vec2Lfd(c(0, 0, (2*pi)^2, 0))
gaitfdPar <- fdPar(gaitbasis, harmaccelLfd, lambda)
y = structure(c(Puissance,Efficacite),dim=as.integer(c(m,P,2)))
gaitfd <- smooth.basis(gaittime, y, gaitfdPar)$fd
Efficacite[X1]
Efficacite[1]
Efficacite = c()
for (i in 1:length(ldf_2)) {
if (str_detect(ldf_2[i],"3D") == TRUE) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/indiceEfficacite/',ldf_2[i],sep=""),sep=";")
for (i in 1:length(X[,1])) {
if (i==1) {print(X[i,1:m])}
Efficacite = c(Efficacite,X[i,1:m])
}
}
}
for (i in 1:length(ldf_2)) {
if (str_detect(ldf_2[i],"3D") == TRUE) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/indiceEfficacite/',ldf_2[i],sep=""),sep=";")
for (j in 1:length(X[,1])) {
if (j==1 && i==1) {print(X[i,1:m])}
Efficacite = c(Efficacite,X[i,1:m])
}
}
}
for (i in 1:length(ldf_2)) {
if (str_detect(ldf_2[i],"3D") == TRUE) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/indiceEfficacite/',ldf_2[i],sep=""),sep=";")
for (j in 1:length(X[,1])) {
if (j==1 && i==1) {print(as.vector(X[i,1:m]))}
Efficacite = c(Efficacite,X[i,1:m])
}
}
}
for (i in 1:length(ldf_2)) {
if (str_detect(ldf_2[i],"3D") == TRUE) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/indiceEfficacite/',ldf_2[i],sep=""),sep=";")
for (j in 1:length(X[,1])) {
if (j==1 && i==1) {print(as.double(X[i,1:m]))}
Efficacite = c(Efficacite,X[i,1:m])
}
}
}
Efficacite = c()
for (i in 1:length(ldf_2)) {
if (str_detect(ldf_2[i],"3D") == TRUE) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/indiceEfficacite/',ldf_2[i],sep=""),sep=";")
for (j in 1:length(X[,1])) {
#      if (j==1 && i==1) {print(as.double(X[i,1:m]))}
Efficacite = c(Efficacite,as.doubleX[i,1:m])
}
}
}
for (i in 1:length(ldf_2)) {
if (str_detect(ldf_2[i],"3D") == TRUE) {
X = read.csv(paste('C:/Users/1mduquesnoy/Desktop/Stage/Base de Données/indiceEfficacite/',ldf_2[i],sep=""),sep=";")
for (j in 1:length(X[,1])) {
#      if (j==1 && i==1) {print(as.double(X[i,1:m]))}
Efficacite = c(Efficacite,as.double(X[i,1:m]))
}
}
}
y = structure(c(Puissance,Efficacite),dim=as.integer(c(m,P,2)))
Efficacite[1]
Puissance[1]
gaitfd <- smooth.basis(gaittime, y, gaitfdPar)$fd
ccafdPar <- fdPar(gaitfd, harmaccelLfd, 1e-8)
ccafd0    <- cca.fd(gaitfd[,1], gaitfd[,2], ncan=3, ccafdPar, ccafdPar)
#  display the canonical correlations
round(ccafd0$ccacorr[1:6],3)
#  compute a VARIMAX rotation of the canonical variables
ccafd <- varmx.cca.fd(ccafd0)
#  plot the canonical weight functions
plot.cca.fd(ccafd)
#  plot the canonical weight functions
plot.cca.fd(ccafd)
plot(Puissance[1:m])
plot(Puissance[1:m])
for (i in 2:60) {
lines(Puissance[1+i*m,m+m*i])
}
for (i in 2:60) {
lines(Puissance[1+i*m:m+m*i])
}
plot(Puissance[1:m])
for (i in 2:60) {
lines(Puissance[1+i*m:m+m*i])
}
library(funHDDC)
library(funData)
library(fda)
library(fda.usc)
library(stringr)
library(Rcmdr)
library(xlsx)
Data_Creation = function(Path) {
#Create the good form for the data, necesseray for the classification
#param Path : a string with the path of your file
X = read.xlsx(Path,sheetIndex = 1)
ID = X[,1]
ID = as.vector(ID)[-1]
X = X[-1,-c(1,362)]
return(list("Data"=X,"ID"=ID))
}
Clustering = function(X,k) {
#Univariate clustering with functional data, find all the modeles as possible
#param X : dataset J*Q where Q is the number of curve and J the length
#param k : the number of clusters
N=length(X[,1])
P=length(X[1,])
basis<- create.bspline.basis(c(0,1), nbasis=25)
var1<-smooth.basis(argvals=seq(0,1,length.out = P),y=t(X),fdParobj=basis)$fd
res.uni<-funHDDC(var1,K=1:k,model=c('AkBkQkDk','ABkQkDk', 'AkBQkDk', 'ABQkDk'),init="kmeans",threshold=0.2)
#print(res.uni)
}
X = Data_Creation('C:/Users/1mduquesnoy/Downloads/Exemple données.xlsx')
dim(X$Data)
library(funHDDC)
library(fda)
library(funData)
library(fda.usc)
library(stringr)
library(Rcmdr)
setwd(dir = "C:/Users/1mduquesnoy/Desktop/Analyses/R/")
Creation_Test_Puissance = function(Name) {
#Creation of the input XTest
#Thus the output is a dataset with all the new powers to be predict.
#param Name   : the name (as a string) of the file containing all the new trials
X = read.csv(paste('Nouveaute/',Name,sep=""))
ID = X[,1]
Power_Test = X[,-1]
return(list("X_Test"=Power_Test,"ID"=ID))
}
Creation_Test = function(Name) {
##Creation of the input XTest
#Thus the output is a dataset with all the new feature to be predict.
#param Name   : the name (as a string) of the file containing all the new trials
X = read.csv(paste('Nouveaute/',Name,sep=""))
print(dim(X))
ID = X[,1]
Power_Test = X[,-1]
return(list("X_Test"=Power_Test,"ID"=ID))
}
Classification_Puissance = function(X_Test) {
#For new trials, it predict the power's class
#param : a P*N dataset containing all the new curves of power
XTrain = read.csv("Module/XTrain_Puissance.csv",sep=";")
YTrain = unlist(read.csv("Module/YTrain_Puissance.csv",sep=";"))
dataf<-data.frame(as.factor(YTrain))
x=fdata(XTrain)
dat=list("df"=dataf,"x"=x)
mod=classif.knn(as.factor(YTrain),x,knn=i)
xx=fdata(X_Test)
newdat<-list("x"=xx)
p1<-predict.classif(mod,xx)
return(p1)
}
Exportation = function(ID,Values,Name) {
#Export in a csv, all the reuslts came down to your new trials
#param ID      : a list with the informations about the identity of the trial
#param Values  : a list with all the values from the model
#param Name    : a string with the name of the file
X = cbind(as.vector(ID),as.vector(Values))
write.table(X, paste(paste("../Sorties_Modeles/",Name,sep=""),".csv",sep=""),
row.names=FALSE, sep=";",dec=".", na=" ")
}
X_Test = Creation_Test_Puissance("Test_Jouve.csv")
X = Creation_Test("Test_Clustering.csv")
Clustering(X$X_Test,3)
Clustering(X$X_Test,20)
