}
}
row_names = c()
for (i in 1:length(Base_Init[,1])) {
row_names[i] = paste(paste(as.vector(Base_Init$Nom)[i],as.vector(Base_Init$Numero)[i],sep="_"),as.vector(Base_Init$Date)[i],sep="_")
}
rownames(Base_Init) = row_names
Base_Init = Base_Init[ , ! colnames(Base_Init) %in% c("Nom","Prenom","Date","Numero")]
res = PCA(Base_Init, scale.unit=TRUE, ncp=5, ind.sup=Labels_Sup, graph = FALSE)
if (choix == "ind") {
plot(fviz_pca_ind(res, axes = c(1, 2), geom = c("point", "text"),
label = "all", invisible = "none", labelsize = 4,
pointsize = 2, habillage = "none",
col.ind = "#024efd", col.ind.sup = "#fb040b",
title = "Visualisation des pilotes supplémentaires sur la projection des individus",
jitter = list(what = "label", width = NULL, height = NULL)))
}
else if (choix == "var") {
plot(fviz_pca_var(res, axes = c(1, 2), geom = c("arrow", "text"),
label = "all", invisible = "none", labelsize = 4,
col.var = "#012efe", col.quanti.sup = "blue",
title = "Projection des variables sur le plan princpal 1-2",
select.var = list(name =NULL, cos2 = NULL, contrib = 25),
jitter = list(what = "label", width = NULL, height = NULL)))
}
return("Done")
}
Projection_ACP(c("Valentino_2018-12-14"),"var")
Projection_ACP(c("Valentino_2018-12-14"),"ind")
N
N[1[c(1:5)]]
N[1]
N[1][c(1,2)]
N[1]
unlist(N[1])
unlist(N[1])[1:2]
unlist(N[1])[1:4]
as.vector(N[1])
as.vector(N[1])[1:2]
N3 = Data$Date
N3[1]
as.vector(N3[1])
str_detect(as.vector(N3[1]),"-")
str_split(as.vector(N3[1]),"-")
t=str_split(as.vector(N3[1]),"-")
t[2]
unlist(t)[2]
library(funHDDC)
library(funData)
library(fda)
library(fda.usc)
library(stringr)
library(Rcmdr)
library(factoextra)
library(FactoMineR)
setwd(dir = "C:/Users/1mduquesnoy/Desktop/Stage/")
Donnees = function() {
N = c()
for (i in 1:60) {
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
N = c(N,length(Data$Puissance))
}
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
N = c(N,length(Data[1,]))
}
}
Puissance = c()
for (i in 1:60) {
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
Puissance = c(Puissance,Data$Puissance[0:(min(N)-1)])
}
Efficacite = c()
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
for (j in 1:length(Data[,1])) {
Efficacite = c(Efficacite,as.double(Data[j,0:(min(N)-1)]))
}
}
}
return(list("P"=Puissance,"E"=Efficacite))
}
CCa_functional = function(Var1,Var2,choix,axe) {
N = length(Var1) / 60
P = 60
gaittime  <- (1:N)/(N+1)
gaitrange <- c(0,1)
gaitbasis <- create.fourier.basis(gaitrange,N+1)
lambda    <- 10^(-11.5)
harmaccelLfd <- vec2Lfd(c(0, 0, (2*pi)^2, 0))
gaitfdPar <- fdPar(gaitbasis, harmaccelLfd, lambda)
b = as.character( (1:P) )
y = structure(c(Var1,Var2),dim = as.integer(c(478,60,2)),dimnames = list(as.character(gaittime),b,c("Puissance","Efficacite")))
#y = structure(c(Var1,Var2),dim = as.integer(c(N, P, 2)))
gaitfd <- smooth.basis(gaittime, y, gaitfdPar)$fd
ccafdPar <- fdPar(gaitfd, harmaccelLfd, 1e-8)
ccafd0    <- cca.fd(gaitfd[,1], gaitfd[,2], ncan=3, ccafdPar, ccafdPar)
#  display the canonical correlations
print(round(ccafd0$ccacorr[1:6],3))
#  compute a VARIMAX rotation of the canonical variables
ccafd <- varmx.cca.fd(ccafd0)
if (choix == "plot") {
plot.cca.fd(ccafd)
}
else if (choix == "score"){
plot(ccafd0$ccavar1[,axe],ccafd0$ccavar2[,axe])
text(ccafd0$ccavar1[,axe],ccafd0$ccavar2[,axe],labels = )
}
}
Donnees = function() {
N = c()
for (i in 1:60) {
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
N = c(N,length(Data$Puissance))
}
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
N = c(N,length(Data[1,]))
}
}
Puissance = c()
for (i in 1:60) {
print(ldf_1[i])
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
Puissance = c(Puissance,Data$Puissance[0:(min(N)-1)])
}
Efficacite = c()
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
for (j in 1:length(Data[,1])) {
Efficacite = c(Efficacite,as.double(Data[j,0:(min(N)-1)]))
}
}
}
return(list("P"=Puissance,"E"=Efficacite))
}
d = Donnees()
Donnees = function() {
N = c()
labels = c()
for (i in 1:60) {
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
N = c(N,length(Data$Puissance))
}
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
N = c(N,length(Data[1,]))
}
}
Puissance = c()
for (i in 1:60) {
l = unlist(ldf_1[i],"_")
labels = c(labels,paste(l[3],l[4],sep="_"))
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
Puissance = c(Puissance,Data$Puissance[0:(min(N)-1)])
}
Efficacite = c()
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
for (j in 1:length(Data[,1])) {
Efficacite = c(Efficacite,as.double(Data[j,0:(min(N)-1)]))
}
}
}
return(list("P"=Puissance,"E"=Efficacite))
}
Donnees = function() {
N = c()
labels = c()
for (i in 1:60) {
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
N = c(N,length(Data$Puissance))
}
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
N = c(N,length(Data[1,]))
}
}
Puissance = c()
for (i in 1:60) {
l = unlist(ldf_1[i],"_")
labels = c(labels,paste(l[3],l[4],sep="_"))
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
Puissance = c(Puissance,Data$Puissance[0:(min(N)-1)])
}
Efficacite = c()
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
for (j in 1:length(Data[,1])) {
Efficacite = c(Efficacite,as.double(Data[j,0:(min(N)-1)]))
}
}
}
return(list("P"=Puissance,"E"=Efficacite),"L"=labels)
}
d = Donnees()
Donnees = function() {
N = c()
labels = c()
for (i in 1:60) {
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
N = c(N,length(Data$Puissance))
}
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
N = c(N,length(Data[1,]))
}
}
Puissance = c()
for (i in 1:60) {
l = unlist(ldf_1[i],"_")
print(l)
#labels = c(labels,paste(l[3],l[4],sep="_"))
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
Puissance = c(Puissance,Data$Puissance[0:(min(N)-1)])
}
Efficacite = c()
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
for (j in 1:length(Data[,1])) {
Efficacite = c(Efficacite,as.double(Data[j,0:(min(N)-1)]))
}
}
}
return(list("P"=Puissance,"E"=Efficacite),"L"=labels)
}
d = Donnees()
Donnees = function() {
N = c()
labels = c()
for (i in 1:60) {
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
N = c(N,length(Data$Puissance))
}
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
N = c(N,length(Data[1,]))
}
}
Puissance = c()
for (i in 1:60) {
l = unlist(str_split(ldf_1[i],"_"))
print(l)
#labels = c(labels,paste(l[3],l[4],sep="_"))
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
Puissance = c(Puissance,Data$Puissance[0:(min(N)-1)])
}
Efficacite = c()
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
for (j in 1:length(Data[,1])) {
Efficacite = c(Efficacite,as.double(Data[j,0:(min(N)-1)]))
}
}
}
return(list("P"=Puissance,"E"=Efficacite),"L"=labels)
}
d = Donnees()
Donnees = function() {
N = c()
labels = c()
for (i in 1:60) {
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
N = c(N,length(Data$Puissance))
}
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
N = c(N,length(Data[1,]))
}
}
Puissance = c()
for (i in 1:60) {
l = unlist(str_split(ldf_1[i],"_"))
print(l)
labels = c(labels,paste(l[3],l[4],sep="_"))
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
Puissance = c(Puissance,Data$Puissance[0:(min(N)-1)])
}
Efficacite = c()
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
for (j in 1:length(Data[,1])) {
Efficacite = c(Efficacite,as.double(Data[j,0:(min(N)-1)]))
}
}
}
return(list("P"=Puissance,"E"=Efficacite),"L"=labels)
}
d = Donnees()
Donnees = function() {
N = c()
labels = c()
for (i in 1:60) {
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
N = c(N,length(Data$Puissance))
}
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
N = c(N,length(Data[1,]))
}
}
Puissance = c()
for (i in 1:60) {
l = unlist(str_split(ldf_1[i],"_"))
labels = c(labels,paste(l[3],l[4],sep="_"))
Data = read.csv(paste("Matlab/Fichier Essais/",ldf_1[i],sep=""),sep=",",header = TRUE)
Puissance = c(Puissance,Data$Puissance[0:(min(N)-1)])
}
Efficacite = c()
for (i in 1:length(ldf_2)) {
if (str_detect(unlist(ldf_2[i]),"3D")) {
Data = read.csv(paste("Base de Données/indiceEfficacite/",ldf_2[i],sep=""),sep=";")
for (j in 1:length(Data[,1])) {
Efficacite = c(Efficacite,as.double(Data[j,0:(min(N)-1)]))
}
}
}
return(list("P"=Puissance,"E"=Efficacite,"L"=labels))
}
d = Donnees()
d$L
CCa_functional = function(Var1,Var2,choix,axe,labels) {
N = length(Var1) / 60
P = 60
gaittime  <- (1:N)/(N+1)
gaitrange <- c(0,1)
gaitbasis <- create.fourier.basis(gaitrange,N+1)
lambda    <- 10^(-11.5)
harmaccelLfd <- vec2Lfd(c(0, 0, (2*pi)^2, 0))
gaitfdPar <- fdPar(gaitbasis, harmaccelLfd, lambda)
b = as.character( (1:P) )
y = structure(c(Var1,Var2),dim = as.integer(c(478,60,2)),dimnames = list(as.character(gaittime),b,c("Puissance","Efficacite")))
#y = structure(c(Var1,Var2),dim = as.integer(c(N, P, 2)))
gaitfd <- smooth.basis(gaittime, y, gaitfdPar)$fd
ccafdPar <- fdPar(gaitfd, harmaccelLfd, 1e-8)
ccafd0    <- cca.fd(gaitfd[,1], gaitfd[,2], ncan=3, ccafdPar, ccafdPar)
#  display the canonical correlations
print(round(ccafd0$ccacorr[1:6],3))
#  compute a VARIMAX rotation of the canonical variables
ccafd <- varmx.cca.fd(ccafd0)
if (choix == "plot") {
plot.cca.fd(ccafd)
}
else if (choix == "score"){
plot(ccafd0$ccavar1[,axe],ccafd0$ccavar2[,axe])
text(ccafd0$ccavar1[,axe],ccafd0$ccavar2[,axe],labels = labels)
}
}
CCa_functional(Puissance,Efficacite,"plot",2,d$L)
d = Donnees()
Puissance = d$P
Efficacite = d$E
CCa_functional(Puissance,Efficacite,"score",1,d$L)
CCa_functional = function(Var1,Var2,choix,axe,labels) {
N = length(Var1) / 60
P = 60
gaittime  <- (1:N)/(N+1)
gaitrange <- c(0,1)
gaitbasis <- create.fourier.basis(gaitrange,N+1)
lambda    <- 10^(-11.5)
harmaccelLfd <- vec2Lfd(c(0, 0, (2*pi)^2, 0))
gaitfdPar <- fdPar(gaitbasis, harmaccelLfd, lambda)
b = as.character( (1:P) )
y = structure(c(Var1,Var2),dim = as.integer(c(478,60,2)),dimnames = list(as.character(gaittime),b,c("Puissance","Efficacite")))
#y = structure(c(Var1,Var2),dim = as.integer(c(N, P, 2)))
gaitfd <- smooth.basis(gaittime, y, gaitfdPar)$fd
ccafdPar <- fdPar(gaitfd, harmaccelLfd, 1e-8)
ccafd0    <- cca.fd(gaitfd[,1], gaitfd[,2], ncan=3, ccafdPar, ccafdPar)
#  display the canonical correlations
print(round(ccafd0$ccacorr[1:6],3))
#  compute a VARIMAX rotation of the canonical variables
ccafd <- varmx.cca.fd(ccafd0)
if (choix == "plot") {
plot.cca.fd(ccafd)
}
else if (choix == "score"){
plot(ccafd0$ccavar1[,axe],ccafd0$ccavar2[,axe])
text(ccafd0$ccavar1[,axe],ccafd0$ccavar2[,axe],labels = labels,pos=3)
}
}
CCa_functional(Puissance,Efficacite,"score",1,d$L)
CCa_functional(Puissance,Efficacite,"score",2,d$L)
CCa_functional(Puissance,Efficacite,"score",1,d$L)
CCa_functional = function(Var1,Var2,choix,axe,labels) {
N = length(Var1) / 60
P = 60
gaittime  <- (1:N)/(N+1)
gaitrange <- c(0,1)
gaitbasis <- create.fourier.basis(gaitrange,N+1)
lambda    <- 10^(-11.5)
harmaccelLfd <- vec2Lfd(c(0, 0, (2*pi)^2, 0))
gaitfdPar <- fdPar(gaitbasis, harmaccelLfd, lambda)
b = as.character( (1:P) )
y = structure(c(Var1,Var2),dim = as.integer(c(478,60,2)),dimnames = list(as.character(gaittime),b,c("Puissance","Efficacite")))
#y = structure(c(Var1,Var2),dim = as.integer(c(N, P, 2)))
gaitfd <- smooth.basis(gaittime, y, gaitfdPar)$fd
ccafdPar <- fdPar(gaitfd, harmaccelLfd, 1e-8)
ccafd0    <- cca.fd(gaitfd[,1], gaitfd[,2], ncan=3, ccafdPar, ccafdPar)
#  display the canonical correlations
print(round(ccafd0$ccacorr[1:6],3))
#  compute a VARIMAX rotation of the canonical variables
ccafd <- varmx.cca.fd(ccafd0)
if (choix == "plot") {
plot.cca.fd(ccafd)
}
else if (choix == "score"){
plot(ccafd0$ccavar1[,axe],ccafd0$ccavar2[,axe],xlab = "First canonical variate",ylab = "Second canonical variate",
title="Representation des individus")
text(ccafd0$ccavar1[,axe],ccafd0$ccavar2[,axe],labels = labels,pos=3)
}
}
CCa_functional(Puissance,Efficacite,"score",1,d$L)
CCa_functional = function(Var1,Var2,choix,axe,labels) {
N = length(Var1) / 60
P = 60
gaittime  <- (1:N)/(N+1)
gaitrange <- c(0,1)
gaitbasis <- create.fourier.basis(gaitrange,N+1)
lambda    <- 10^(-11.5)
harmaccelLfd <- vec2Lfd(c(0, 0, (2*pi)^2, 0))
gaitfdPar <- fdPar(gaitbasis, harmaccelLfd, lambda)
b = as.character( (1:P) )
y = structure(c(Var1,Var2),dim = as.integer(c(478,60,2)),dimnames = list(as.character(gaittime),b,c("Puissance","Efficacite")))
#y = structure(c(Var1,Var2),dim = as.integer(c(N, P, 2)))
gaitfd <- smooth.basis(gaittime, y, gaitfdPar)$fd
ccafdPar <- fdPar(gaitfd, harmaccelLfd, 1e-8)
ccafd0    <- cca.fd(gaitfd[,1], gaitfd[,2], ncan=3, ccafdPar, ccafdPar)
#  display the canonical correlations
print(round(ccafd0$ccacorr[1:6],3))
#  compute a VARIMAX rotation of the canonical variables
ccafd <- varmx.cca.fd(ccafd0)
if (choix == "plot") {
plot.cca.fd(ccafd)
}
else if (choix == "score"){
plot(ccafd0$ccavar1[,axe],ccafd0$ccavar2[,axe],xlab = "First canonical variate",ylab = "Second canonical variate",
main="Representation des individus")
text(ccafd0$ccavar1[,axe],ccafd0$ccavar2[,axe],labels = labels,pos=3)
}
}
CCa_functional(Puissance,Efficacite,"score",1,d$L)
setwd(dir = "C:/Users/1mduquesnoy/Downloads/BMX_race/Analyses/R")
Projection_ACP(c("Valentino_2018-12-14"),"var",1,2)
Projection_ACP = function(Labels,choix,axe1,axe2) {
Data = read.csv('C:/Users/1mduquesnoy/Downloads/BMX_race/Analyses/Données/Frames/Base_Frames.csv',sep=";",header=TRUE)
Data = subset(Data, select=c("DistanceRecul","DAlignementMin","DEpauleMin",
"DistanceDmin","EngagementDmin","HauteurFWRecul","Intention","HauteurFWDmin",
"ForceUPiedAvMax","ForceUPiedArMax","MoyennePuissanceButteTotale","MoyennePuissancePremCassure","PuissanceMaxPremCassure",
"TpsPassageGrille","TpsPremCassure","TpsBasDeButte","VitesseBasDeButte",
"VMaxPremCassure","ImpulsionParCoups","TravailParCoups","ImpulsionParCoups_1","TravailParCoups_1",
"ImpulsionParCoups_2","TravailParCoups_2","ImpulsionParCoups_3","TravailParCoups_3","ImpulsionParCoups_4",
"TravailParCoups_4","Time2Peak","Nom","Prenom","Numero","Date","Manivelle","Theta.Depart","Theta.Recul",
"Braquet","Temps.Reaction","Explosivite"))
N = length(Data[,1])
P = length(Data[1,])
Test = c()
Labels_Init = c("Pilard_2018-06-21","Rencurel_2018-12-12","Ragot_2018-12-11","Mayet_2018-06-19","Mahieu_2018-12-13",
"Racine_2018-06-22","Andre_2018-12-12","Darnand_2018-06-21","Jouve_2018-06-20")
Labels_Sup = c()
Base_Init = c()
for (i in 1:N) {
if ( paste(as.vector(Data$Nom[i]), as.vector(Data$Date)[i],sep="_") %in% Labels_Init || paste(as.vector(Data$Nom[i]), as.vector(Data$Date)[i],sep="_") %in% Labels) {
Base_Init = rbind(Base_Init,Data[i,])
}
}
for (i in 1:length(Base_Init[,1])) {
if ( paste(as.vector(Base_Init$Nom[i]), as.vector(Base_Init$Date)[i],sep="_") %in% Labels) {
Labels_Sup = c(Labels_Sup,i)
}
}
row_names = c()
for (i in 1:length(Base_Init[,1])) {
row_names[i] = paste(as.vector(Base_Init$Nom)[i],as.vector(Base_Init$Numero)[i],sep="_")
#row_names[i] = paste(paste(substring(as.vector(Base_Init$Nom)[i],1,3),as.vector(Base_Init$Numero)[i],sep="_"),substring(as.vector((Base_Init$Date))[i],6,10),sep="_")
}
rownames(Base_Init) = row_names
Base_Init = Base_Init[ , ! colnames(Base_Init) %in% c("Nom","Prenom","Date","Numero")]
res = PCA(Base_Init, scale.unit=TRUE, ncp=5, ind.sup=Labels_Sup, graph = FALSE)
if (choix == "ind") {
plot(fviz_pca_ind(res, axes = c(axe1,axe2), geom = c("point", "text"),
label = "all", invisible = "none", labelsize = 4,
pointsize = 2, habillage = "none",
col.ind = "#024efd", col.ind.sup = "#fb040b",
title = paste(paste("Visualisation des individus sur le plan princpal ",axe1,sep=""),axe2,sep="-"),
jitter = list(what = "label", width = NULL, height = NULL)))
}
else if (choix == "var") {
plot(fviz_pca_var(res, axes = c(axe1,axe2), geom = c("arrow", "text"),
label = "all", invisible = "none", labelsize = 4,
col.var = "#012efe", col.quanti.sup = "blue",
title = paste(paste("Projection des variables sur le plan princpal ",axe1,sep=""),axe2,sep="-"),
select.var = list(name =NULL, cos2 = NULL, contrib = 25),
jitter = list(what = "label", width = NULL, height = NULL)))
}
return("Done")
}
Projection_ACP(c("Valentino_2018-12-14"),"var",1,2)
